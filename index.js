//Recapitulando a Aula de JavaScript (10/02/2025)

// ğŸ“Œ 1. VariÃ¡veis e Tipos de Dados
// O JavaScript possui diferentes formas de declarar variÃ¡veis:

var nome = "JoÃ£o";  // Evite usar (escopo global pode gerar problemas)
let idade = 25;  // Recomendado (escopo de bloco)
const PI = 3.1415;  // Valor fixo (nÃ£o pode ser alterado)

//Tipos de Dados Primitivos:
let texto = "OlÃ¡, mundo!";  // String  
let numero = 42;  // Number  
let booleano = true;  // Boolean  
let nulo = null;  // Null (intencionalmente vazio)  
let indefinido;  // Undefined (nÃ£o inicializado)  

//Arrays e Objetos:
let frutas = ["MaÃ§Ã£", "Banana", "Laranja"];
console.log(frutas[0]); // "MaÃ§Ã£"
let pessoa = { nome: "Carlos", idade: 30 };
console.log(pessoa.nome); // "Carlos"

// ğŸ“Œ 2. Estruturas de Controle
// Usadas para tomar decisÃµes no cÃ³digo.
// Condicional if-else

let hora = 14;
if (hora < 12) {
    console.log("Bom dia!");
} else if (hora < 18) {
    console.log("Boa tarde!");
} else {
    console.log("Boa noite!");
}

//Switch-case:
let cor = "azul";
switch (cor) {
    case "vermelho":
        console.log("A cor escolhida foi vermelho.");
        break;
    case "azul":
        console.log("A cor escolhida foi azul.");
        break;
    default:
        console.log("Cor nÃ£o reconhecida.");
}

//LaÃ§os de repetiÃ§Ã£o (for e while)
for (let i = 0; i < 3; i++) {
    console.log("Contador:", i);
}
let contador = 0;
while (contador < 3) {
    console.log("NÃºmero:", contador);
    contador++;
}

// ğŸ“Œ 3. FunÃ§Ãµes e Escopo
// FunÃ§Ã£o Tradicional:

function saudacao(nome) {
    return "OlÃ¡, " + nome + "!";
}
console.log(saudacao("Maria"));  // "OlÃ¡, Maria!"

//Arrow Function:
const dobro = (num) => num * 2;
console.log(dobro(5));  // 10
//Escopo de VariÃ¡veis:
let global = "Sou global";
function testarEscopo() {
    let local = "Sou local";
    console.log(global);  // OK
    console.log(local);   // OK
}
testarEscopo();

// console.log(local); // Erro! 'local' sÃ³ existe dentro da funÃ§Ã£o
//Callback Function (introduÃ§Ã£o):
function processar(callback) {
    console.log("Processando...");
    callback();
}

processar(() => console.log("Finalizado!"));
//FunÃ§Ã£o AssÃ­ncrona (introduÃ§Ã£o):
async function pegarDados() {
    return "Dados recebidos!";
}
pegarDados().then(console.log); // "Dados recebidos!"




//////////////////////////////////////////////////////////////////////////////////////////

//Aula 17/02


// Arrow Functions e Higher-Order Functions no JavaScript
// O que sÃ£o Arrow Functions?
// As Arrow Functions foram introduzidas no ECMAScript 6 (ES6), lanÃ§ado em 2015. Elas representam uma sintaxe mais curta e concisa para escrever funÃ§Ãµes em JavaScript. AlÃ©m disso, as arrow functions nÃ£o possuem seu prÃ³prio this, o que pode evitar problemas comuns ao trabalhar com funÃ§Ãµes dentro de objetos e classes.
// Sintaxe da Arrow Function:
// Antes do ES6, as funÃ§Ãµes eram escritas com a palavra-chave function:
const somandoFuncaoes = function(a, b) {
    return a + b;
};
console.log(somandoFuncaoes(2, 3)); // 5

//Com as Arrow Functions, podemos reescrever esse cÃ³digo de forma mais concisa:
const somandoFuncoes = (a, b) => a + b;
console.log(somandoFuncaoes(2, 3)); // 5

// Principais CaracterÃ­sticas das Arrow Functions:
// Se a funÃ§Ã£o tiver apenas um parÃ¢metro, os parÃªnteses sÃ£o opcionais:
const quadrado = x => x * x;
console.log(quadrado(4)); // 16

//Se houver mÃºltiplos parÃ¢metros, os parÃªnteses sÃ£o obrigatÃ³rios:
const multiplicar = (a, b) => a * b;
console.log(multiplicar(3, 4)); // 12

//Se houver mais de uma linha no corpo da funÃ§Ã£o, Ã© necessÃ¡rio usar {} e a palavra-chave return explicitamente:
const saudacaoPessoa = (nome) => {
    return `OlÃ¡, ${nome}!`;
};
console.log(saudacaoPessoa("JoÃ£o")); // "OlÃ¡, JoÃ£o!"

// As arrow functions nÃ£o possuem seu prÃ³prio this, herdando o this do escopo onde foram declaradas. 
// Isso evita problemas comuns ao usar funÃ§Ãµes em eventos e objetos.

// Higher-Order Functions (FunÃ§Ãµes de Alta Ordem)
// No JavaScript, uma Higher-Order Function (HOF) Ã© uma funÃ§Ã£o que recebe outra funÃ§Ã£o como argumento e/ou retorna uma funÃ§Ã£o como resultado. Essas funÃ§Ãµes permitem criar cÃ³digo mais modular e reutilizÃ¡vel.
// Exemplo de Higher-Order Function:
// Antes do ES6:
function aplicarOperacao(a, b, operacao) {
    return operacao(a, b);
}
function somar(x, y) {
    return x + y;
}
console.log(aplicarOperacao(5, 3, somar)); // 8

//Com Arrow Functions, podemos simplificar ainda mais:
const aplicarOperacao1 = (a, b, operacao) => operacao(a, b);
console.log(aplicarOperacao1(5, 3, (x, y) => x + y)); // 8
console.log(aplicarOperacao1(10, 2, (x, y) => x * y)); // 20

// Exemplos comuns de Higher-Order Functions no JavaScript:
// VÃ¡rias funÃ§Ãµes da API do JavaScript utilizam esse conceito, como map(), filter() e reduce().
// map() â€“ Transforma um array aplicando uma funÃ§Ã£o em cada elemento:
const numeros = [1, 2, 3, 4];
const dobrados = numeros.map(num => num * 2);
console.log(dobrados); // [2, 4, 6, 8]

//filter() â€“ Retorna um novo array apenas com os elementos que atendem a uma condiÃ§Ã£o:
const idades = [10, 22, 30, 15, 18];
const maioresDeIdade = idades.filter(idade => idade >= 18);
console.log(maioresDeIdade); // [22, 30, 18]

//reduce() â€“ Reduz um array a um Ãºnico valor:
const valores = [10, 20, 30, 40];
const soma = valores.reduce((total, num) => total + num, 0);
console.log(soma); // 100

////////////////////
console.log("/////////////////INICIO DOS EXERCICIOS DE Arrow Functions e Higher-Order Functions///////////////////////////")
//ExercÃ­cios de Arrow Functions e Higher-Order Functions.

/*ExercÃ­cio 1: Arrow Function com um parÃ¢metro
Crie uma arrow function chamada dobro que recebe um nÃºmero e retorna o dobro dele.
Dica: NÃ£o use {} nem return, pois a funÃ§Ã£o pode ser simplificada.*/

// ğŸ“Œ Exemplo de entrada e saÃ­da esperada:
// console.log(dobro(7)); // 14
// console.log(dobro(15)); // 30

//Resposta:
//Apenas um parÃ¢metro
// const quadrado = x => x * x;
// console.log(quadrado(4)); // 16

const dobroDeValor = x => x*2;
console.log(dobroDeValor(2));

/*ExercÃ­cio 2: Arrow Function com mÃºltiplos parÃ¢metros
Crie uma arrow function chamada dividir que recebe dois nÃºmeros e retorna o resultado da divisÃ£o do primeiro pelo segundo.*/

// ğŸ“Œ Exemplo de entrada e saÃ­da esperada:
// console.log(dividir(10, 2)); // 5
// console.log(dividir(9, 3));  // 3

//Resposta:
//Apenas mÃºltiplos parÃ¢metros
// const multiplicar = (a, b) => a * b;
// console.log(multiplicar(3, 4)); // 12

const dividirValores = (a, b) => a/b;
console.log(dividirValores(100,2));

/*ExercÃ­cio 3: Arrow Function com mÃºltiplas linhas
Crie uma arrow function chamada mensagemBoasVindas que recebe um nome e retorna uma mensagem de boas-vindas no formato "Seja bem-vindo, [nome]!".*/

// ğŸ“Œ Exemplo de entrada e saÃ­da esperada:
// console.log(mensagemBoasVindas("Carlos")); // "Seja bem-vindo, Carlos!"
// console.log(mensagemBoasVindas("Ana"));    // "Seja bem-vindo, Ana!"

//Resposta:
const mensagemBoasVindasExemplo = nome => "Seja bem-vindo, " + [nome] + "!";
console.log(mensagemBoasVindasExemplo("Ana"));

/*ExercÃ­cio 4: Higher-Order Function personalizada
Crie uma funÃ§Ã£o chamada executarOperacao que recebe trÃªs parÃ¢metros: dois nÃºmeros e uma funÃ§Ã£o que representa uma operaÃ§Ã£o matemÃ¡tica (adiÃ§Ã£o, subtraÃ§Ã£o, multiplicaÃ§Ã£o ou divisÃ£o).
Em seguida, chame essa funÃ§Ã£o passando diferentes operaÃ§Ãµes matemÃ¡ticas como arrow functions.*/

// ğŸ“Œ Exemplo de entrada e saÃ­da esperada:
// console.log(executarOperacao(6, 3, (a, b) => a - b)); // 3
// console.log(executarOperacao(4, 5, (a, b) => a * b)); // 20

//Resposta:

/*ExercÃ­cio 5: map() â€“ TransformaÃ§Ã£o de um array
Crie um array de preÃ§os de produtos e use o mÃ©todo map() para aplicar um desconto de 10% em cada preÃ§o.*/

// ğŸ“Œ Exemplo de entrada e saÃ­da esperada:
// const precos = [100, 200, 300, 400];
// const precosComDesconto = /* aplique map() aqui */;
// console.log(precosComDesconto); // [90, 180, 270, 360]

//Resposta:

/*ExercÃ­cio 6: filter() â€“ Filtrando valores em um array
Crie um array com idades e use o mÃ©todo filter() para retornar apenas as idades menores que 18 anos.*/

// ğŸ“Œ Exemplo de entrada e saÃ­da esperada:
// const idades = [12, 25, 17, 30, 14, 19];
// const menoresDeIdade = /* aplique filter() aqui */;
// console.log(menoresDeIdade); // [12, 17, 14]

//Resposta:

/*ExercÃ­cio 7: reduce() â€“ Somando valores de um array
Crie um array com nÃºmeros e use o mÃ©todo reduce() para calcular o produto (multiplicaÃ§Ã£o de todos os nÃºmeros).*/

// ğŸ“Œ Exemplo de entrada e saÃ­da esperada:
// const numeros = [2, 3, 4, 5];
// const produto = /* aplique reduce() aqui */;
// console.log(produto); // 120 (pois 2 * 3 * 4 * 5 = 120)

//Resposta:

//Esses exercÃ­cios ajudarÃ£o a reforÃ§ar o aprendizado sobre Arrow Functions e Higher-Order Functions no JavaScript. ğŸš€