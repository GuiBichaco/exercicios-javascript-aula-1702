//Recapitulando a Aula de JavaScript (10/02/2025)

// üìå 1. Vari√°veis e Tipos de Dados
// O JavaScript possui diferentes formas de declarar vari√°veis:

var nome = "Jo√£o";  // Evite usar (escopo global pode gerar problemas)
let idade = 25;  // Recomendado (escopo de bloco)
const PI = 3.1415;  // Valor fixo (n√£o pode ser alterado)

//Tipos de Dados Primitivos:
let texto = "Ol√°, mundo!";  // String  
let numero = 42;  // Number  
let booleano = true;  // Boolean  
let nulo = null;  // Null (intencionalmente vazio)  
let indefinido;  // Undefined (n√£o inicializado)  

//Arrays e Objetos:
let frutas = ["Ma√ß√£", "Banana", "Laranja"];
console.log(frutas[0]); // "Ma√ß√£"
let pessoa = { nome: "Carlos", idade: 30 };
console.log(pessoa.nome); // "Carlos"

// üìå 2. Estruturas de Controle
// Usadas para tomar decis√µes no c√≥digo.
// Condicional if-else

let hora = 14;
if (hora < 12) {
    console.log("Bom dia!");
} else if (hora < 18) {
    console.log("Boa tarde!");
} else {
    console.log("Boa noite!");
}

//Switch-case:
let cor = "azul";
switch (cor) {
    case "vermelho":
        console.log("A cor escolhida foi vermelho.");
        break;
    case "azul":
        console.log("A cor escolhida foi azul.");
        break;
    default:
        console.log("Cor n√£o reconhecida.");
}

//La√ßos de repeti√ß√£o (for e while)
for (let i = 0; i < 3; i++) {
    console.log("Contador:", i);
}
let contador = 0;
while (contador < 3) {
    console.log("N√∫mero:", contador);
    contador++;
}

// üìå 3. Fun√ß√µes e Escopo
// Fun√ß√£o Tradicional:

function saudacao(nome) {
    return "Ol√°, " + nome + "!";
}
console.log(saudacao("Maria"));  // "Ol√°, Maria!"

//Arrow Function:
const dobro = (num) => num * 2;
console.log(dobro(5));  // 10
//Escopo de Vari√°veis:
let global = "Sou global";
function testarEscopo() {
    let local = "Sou local";
    console.log(global);  // OK
    console.log(local);   // OK
}
testarEscopo();

// console.log(local); // Erro! 'local' s√≥ existe dentro da fun√ß√£o
//Callback Function (introdu√ß√£o):
function processar(callback) {
    console.log("Processando...");
    callback();
}

processar(() => console.log("Finalizado!"));
//Fun√ß√£o Ass√≠ncrona (introdu√ß√£o):
async function pegarDados() {
    return "Dados recebidos!";
}
pegarDados().then(console.log); // "Dados recebidos!"




//////////////////////////////////////////////////////////////////////////////////////////

//Aula 17/02


// Arrow Functions e Higher-Order Functions no JavaScript
// O que s√£o Arrow Functions?
// As Arrow Functions foram introduzidas no ECMAScript 6 (ES6), lan√ßado em 2015. Elas representam uma sintaxe mais curta e concisa para escrever fun√ß√µes em JavaScript. Al√©m disso, as arrow functions n√£o possuem seu pr√≥prio this, o que pode evitar problemas comuns ao trabalhar com fun√ß√µes dentro de objetos e classes.
// Sintaxe da Arrow Function:
// Antes do ES6, as fun√ß√µes eram escritas com a palavra-chave function:
const somandoFuncaoes = function(a, b) {
    return a + b;
};
console.log(somandoFuncaoes(2, 3)); // 5

//Com as Arrow Functions, podemos reescrever esse c√≥digo de forma mais concisa:
const somandoFuncoes = (a, b) => a + b;
console.log(somandoFuncaoes(2, 3)); // 5

// Principais Caracter√≠sticas das Arrow Functions:
// Se a fun√ß√£o tiver apenas um par√¢metro, os par√™nteses s√£o opcionais:
const quadrado = x => x * x;
console.log(quadrado(4)); // 16

//Se houver m√∫ltiplos par√¢metros, os par√™nteses s√£o obrigat√≥rios:
const multiplicar = (a, b) => a * b;
console.log(multiplicar(3, 4)); // 12

//Se houver mais de uma linha no corpo da fun√ß√£o, √© necess√°rio usar {} e a palavra-chave return explicitamente:
const saudacao = (nome) => {
    return `Ol√°, ${nome}!`;
};
console.log(saudacao("Jo√£o")); // "Ol√°, Jo√£o!"

// As arrow functions n√£o possuem seu pr√≥prio this, herdando o this do escopo onde foram declaradas. 
// Isso evita problemas comuns ao usar fun√ß√µes em eventos e objetos.

// Higher-Order Functions (Fun√ß√µes de Alta Ordem)
// No JavaScript, uma Higher-Order Function (HOF) √© uma fun√ß√£o que recebe outra fun√ß√£o como argumento e/ou retorna uma fun√ß√£o como resultado. Essas fun√ß√µes permitem criar c√≥digo mais modular e reutiliz√°vel.
// Exemplo de Higher-Order Function:
// Antes do ES6:
function aplicarOperacao(a, b, operacao) {
    return operacao(a, b);
}
function somar(x, y) {
    return x + y;
}
console.log(aplicarOperacao(5, 3, somar)); // 8

//Com Arrow Functions, podemos simplificar ainda mais:
const aplicarOperacao = (a, b, operacao) => operacao(a, b);
console.log(aplicarOperacao(5, 3, (x, y) => x + y)); // 8
console.log(aplicarOperacao(10, 2, (x, y) => x * y)); // 20

// Exemplos comuns de Higher-Order Functions no JavaScript:
// V√°rias fun√ß√µes da API do JavaScript utilizam esse conceito, como map(), filter() e reduce().
// map() ‚Äì Transforma um array aplicando uma fun√ß√£o em cada elemento:
const numeros = [1, 2, 3, 4];
const dobrados = numeros.map(num => num * 2);
console.log(dobrados); // [2, 4, 6, 8]

//filter() ‚Äì Retorna um novo array apenas com os elementos que atendem a uma condi√ß√£o:
const idades = [10, 22, 30, 15, 18];
const maioresDeIdade = idades.filter(idade => idade >= 18);
console.log(maioresDeIdade); // [22, 30, 18]

//reduce() ‚Äì Reduz um array a um √∫nico valor:
const valores = [10, 20, 30, 40];
const soma = valores.reduce((total, num) => total + num, 0);
console.log(soma); // 100